"""
Matplotlib demo
"""

from atom.api import Atom, Str, List, Value, Int, observe
from enaml.layout.api import vbox, hbox, spacer, align
from enaml.widgets.api import Window, Container, CheckBox, ComboBox, ObjectCombo, Label, PopupView, Form, Slider, Field, PushButton
from mpl_canvas_container import MPLCanvasContainer
from utils import load_icon
from colors import LINE_COLORS
from enaml.application import deferred_call

from matplotlib.figure import Figure
from matplotlib import style, cm
from datasources import scatter_data


class FigureModel( Atom ):

    controller = Value()
    figure = Value()
    axes = Value()
    title = Str()
    xlabel = Str()
    ylabel = Str()
    data_points = Int( default=50 )
    max_radius = Int( default=15 )
    data = Value()

    def __init__( self, title=None, xlabel=None, ylabel=None ):
        """ default init  """
        self.title = title
        self.xlabel = xlabel
        self.ylabel = ylabel
        self.figure = Figure()
        self.figure.clear()
        self.axes = self.figure.add_subplot( 1, 1, 1, title=title, xlabel=xlabel, ylabel=ylabel )
        self.make_data()
        self.plot_lines()

    def apply_labels( self ):
        """ apply labels """
        self.axes.set_title( self.title )
        self.axes.set_xlabel( self.xlabel )
        self.axes.set_ylabel( self.ylabel )

    def make_data( self ):
        """ make data """
        return scatter_data(self.data_points, self.max_radius)

    def plot_lines( self ):
        """ plot random lines """
        x, y, colors, area = self.make_data()
        self.axes.scatter(x, y, s=area, c=colors, alpha=0.5)
        self.axes.legend( [ 'Scatter', ] )

    @observe( 'title', 'xlabel', 'ylabel' )
    def _update_labels( self, change ):
        if change and change.get( 'type' ) != 'create':
            value = change.get( 'value' )
            if value:
                if self.controller is not None:
                    self.apply_labels()
                    deferred_call( self.controller.canvas.draw )

    @observe( 'data_points', 'max_radius' )
    def _observe_data_change( self, change ):
        if change and change.get( 'type' ) != 'create':
            value = change.get( 'value' )
            if value:
                if self.controller is not None:
                    self.controller.plot_lines()
                    deferred_call( self.controller.canvas.draw )


class ModelController( Atom ):

    canvas = Value()
    figure_model = Value()

    def __init__( self, canvas=None, figure_model=None ):
        """ default init """
        self.canvas = canvas
        self.figure_model = figure_model
        figure_model.controller = self

    def plot_lines( self ):
        """ replot lines  """
        if self.figure_model:
            self.figure_model.axes.clear()
            self.figure_model.apply_labels()
            self.figure_model.plot_lines()
            self.canvas.draw()


enamldef ConfigPopup( PopupView ): popup:
    foreground = 'white'
    background = 'rgba(30, 30, 30, 0.85)'

    parent_anchor << (0.5, 0.5)
    anchor << (0.5, 0.0)
    arrow_size << 20
    arrow_edge << 'top'
    offset << (0,0)

    Form:
        padding = 20
        Label:
            foreground = 'white'
            text = 'Title'
        Field:
            text := nonlocals.controller.figure_model.title
        Label:
            foreground = 'white'
            text = 'X Label'
        Field:
            text := nonlocals.controller.figure_model.xlabel
        Label:
            foreground = 'white'
            text = 'Y Label'
        Field:
            text := nonlocals.controller.figure_model.ylabel
        Label:
            foreground = 'white'
            text = 'Points'
        Slider:
            minimum = 10
            maximum = 200
            value := nonlocals.controller.figure_model.data_points
        Label:
            foreground = 'white'
            text = 'Radius'
        Slider:
            minimum = 1
            maximum = 50
            value := nonlocals.controller.figure_model.max_radius


def on_key_press( *args, **kwargs ):
    """ on key press event """
    print '>>> press ', args, kwargs


def get_figure( title='Demo', xlabel=None, ylabel=None ):
    """ create Figure """

    figure_model = FigureModel( title=title, xlabel=xlabel, ylabel=ylabel )
    return figure_model


enamldef Main( Window ):

    icon = load_icon('application-blue.png')
    initial_size = (800, 600)

    attr custom_title = ''
    title = custom_title
    attr mplot_style = ''

    attr figure_model = get_figure( title='Scatter Demo', xlabel='Y Data', ylabel='y Data')
    attr controller = ModelController( canvas=mpl.canvas, figure_model=figure_model )

    Container:
        padding = 5
        constraints = [ vbox( mpl, hbox( b, r ) ), b.width == r.width ]

        MPLCanvasContainer: mpl:
            mpl_figure << figure_model.figure
            mpl_event_actions << [ ( 'key_press_event', on_key_press ), ]

        PushButton: b:
            text = 'Config'
            icon = load_icon('plus.png')
            clicked ::
                ConfigPopup( self ).show()

        PushButton: r:
            text = 'Refresh'
            icon = load_icon( 'arrow-circle.png')
            clicked ::
                controller.plot_lines()

    initialized ::
        pass
